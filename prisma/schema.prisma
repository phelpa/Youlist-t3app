// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Lists         Lists[]
}

model Annotations {
  ant_id        String    @id @default(cuid())
  ant_videotime Float
  ant_text      String   
  ant_vid_id    String
  ant_created   DateTime  @default(now())
  Videos        Videos   @relation(fields: [ant_vid_id], references: [vid_id], onDelete: Cascade)
}

model Lists {
  lst_id          String    @id @default(cuid())
  lst_title       String  
  lst_description String  
  lst_youtube_id  String  
  lst_usr_id      String
  lst_created     DateTime  @default(now())
  User            User    @relation(fields: [lst_usr_id], references: [id], onDelete: Cascade)
  Videos          Videos[]
}

model Videos {
  vid_id          String    @id @default(cuid())
  vid_title       String        
  vid_description String        
  vid_youtube_id  String        
  vid_lst_id      String
  vid_created     DateTime  @default(now()) 
  Lists           Lists         @relation(fields: [vid_lst_id], references: [lst_id], onDelete: Cascade)
  Annotations     Annotations[]
}